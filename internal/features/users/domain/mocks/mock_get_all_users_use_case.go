// Code generated by MockGen. DO NOT EDIT.
// Source: internal/features/users/application/usecases/get_all_users_use_case.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/jesusdomingochisvert/WIki/internal/features/users/presentations/dto"
)

// MockGetAllUsersUseCase is a mock of GetAllUsersUseCase interface.
type MockGetAllUsersUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGetAllUsersUseCaseMockRecorder
}

// MockGetAllUsersUseCaseMockRecorder is the mock recorder for MockGetAllUsersUseCase.
type MockGetAllUsersUseCaseMockRecorder struct {
	mock *MockGetAllUsersUseCase
}

// NewMockGetAllUsersUseCase creates a new mock instance.
func NewMockGetAllUsersUseCase(ctrl *gomock.Controller) *MockGetAllUsersUseCase {
	mock := &MockGetAllUsersUseCase{ctrl: ctrl}
	mock.recorder = &MockGetAllUsersUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetAllUsersUseCase) EXPECT() *MockGetAllUsersUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetAllUsersUseCase) Execute(ctx context.Context) ([]dto.UserDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx)
	ret0, _ := ret[0].([]dto.UserDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGetAllUsersUseCaseMockRecorder) Execute(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetAllUsersUseCase)(nil).Execute), ctx)
}
